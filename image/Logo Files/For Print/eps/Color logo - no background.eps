%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 839
%%HiResBoundingBox: 0 0 2391.1199 838.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 838.07996 re
W
q
[0.24 0 0 -0.24 0 838.07996] cm
q
0 0 9962.5 3490.625 re
W*
q
[37.278709 0 0 37.278591 -124.442337 -117.054771] cm
/DeviceRGB {} CS
[1 0.1961 0.3647] SC
/DeviceRGB {} cs
[1 0.1961 0.3647] sc
29.5 25.5 m
32 25.5 34.099998 23.4 34.099998 20.9 c
34.099998 18.4 31.999998 16.299999 29.499998 16.299999 c
26.999998 16.299999 24.899998 18.4 24.899998 20.9 c
24.899998 23.4 27 25.5 29.5 25.5 c
h
27 58 m
27 58.700001 27.6 59.299999 28.299999 59.299999 c
29 59.299999 29.599998 58.700001 29.599998 58 c
29.599998 57.299999 28.999998 56.700001 28.299999 56.700001 c
27.6 56.700001 27 57.299999 27 58 c
h
36.200001 31.299999 m
37.299999 31.299999 38.100002 30.4 38.100002 29.4 c
38.100002 28.299999 37.200001 27.5 36.200001 27.5 c
35.100002 27.5 34.299999 28.4 34.299999 29.4 c
34.299999 30.4 35.099998 31.299999 36.200001 31.299999 c
h
21.1 48.599998 m
23.6 48.599998 25.700001 46.5 25.700001 44 c
25.700001 41.5 23.6 39.400002 21.1 39.400002 c
18.6 39.400002 16.5 41.5 16.5 44 c
16.6 46.5 18.6 48.599998 21.1 48.599998 c
h
14.5 37.799999 m
15.6 37.799999 16.4 36.899998 16.4 35.899998 c
16.4 34.799999 15.5 33.999996 14.5 33.999996 c
13.4 33.999996 12.6 34.899998 12.6 35.899998 c
12.6 37 13.4 37.799999 14.5 37.799999 c
h
13.8 42 m
13.8 41.299999 13.2 40.700001 12.5 40.700001 c
11.8 40.700001 11.2 41.299999 11.2 42 c
11.2 42.700001 11.8 43.299999 12.5 43.299999 c
13.2 43.299999 13.8 42.700001 13.8 42 c
h
19.9 31.200001 m
21.699999 31.200001 23.1 29.800001 23.1 28 c
23.1 26.199999 21.700001 24.799999 19.9 24.799999 c
18.1 24.799999 16.699999 26.199999 16.699999 28 c
16.699999 29.800001 18.1 31.200001 19.9 31.200001 c
h
58.799999 13.6 m
59.5 13.6 60.099998 13 60.099998 12.3 c
60.099998 11.6 59.5 11 58.799999 11 c
58.099998 11 57.5 11.6 57.5 12.3 c
57.5 13 58.099998 13.6 58.799999 13.6 c
h
23.799999 57.5 m
23.799999 54.400002 21.299999 51.900002 18.199999 51.900002 c
15.099999 51.900002 12.599999 54.400002 12.599999 57.5 c
12.599999 60.599998 15.099999 63.099998 18.199999 63.099998 c
21.299999 63.099998 23.799999 60.599998 23.799999 57.5 c
h
79.900002 33.900002 m
82.400002 33.900002 84.5 31.800001 84.5 29.300001 c
84.5 26.800001 82.400002 24.700001 79.900002 24.700001 c
77.400002 24.700001 75.300003 26.800001 75.300003 29.300001 c
75.300003 31.800001 77.300003 33.900002 79.900002 33.900002 c
h
69.599998 65.5 m
69.599998 67.300003 71 68.699997 72.799995 68.699997 c
74.599998 68.699997 75.999992 67.299995 75.999992 65.5 c
75.999992 63.700005 74.599991 62.299999 72.799995 62.299999 c
71 62.299999 69.599998 63.700001 69.599998 65.5 c
h
72.800003 22.9 m
74.600006 22.9 76 21.5 76 19.699999 c
76 17.9 74.599998 16.499998 72.800003 16.499998 c
71 16.499998 69.600006 17.899998 69.600006 19.699999 c
69.599998 21.5 71 22.9 72.800003 22.9 c
h
65.699997 31.200001 m
67.5 31.200001 68.899994 29.800001 68.899994 28 c
68.899994 26.199999 67.499992 24.799999 65.699997 24.799999 c
63.899998 24.799999 62.499996 26.199999 62.499996 28 c
62.499996 29.800001 63.900002 31.200001 65.699997 31.200001 c
h
77.199997 42.5 m
77.199997 45.599998 79.699997 48.099998 82.799995 48.099998 c
85.899994 48.099998 88.399994 45.599998 88.399994 42.5 c
88.399994 39.400002 85.899994 36.900002 82.799995 36.900002 c
79.699997 36.900002 77.199997 39.400002 77.199997 42.5 c
h
74 42 m
74 41.299999 73.400002 40.700001 72.699997 40.700001 c
72 40.700001 71.399994 41.299999 71.399994 42 c
71.399994 42.700001 71.999992 43.299999 72.699997 43.299999 c
73.400002 43.299999 74 42.700001 74 42 c
h
64.800003 16.1 m
65.900002 16.1 66.700005 15.200001 66.700005 14.200001 c
66.700005 13.200001 65.800003 12.300001 64.800003 12.300001 c
63.700005 12.300001 62.900002 13.200001 62.900002 14.200001 c
62.900002 15.200001 63.799999 16.1 64.800003 16.1 c
h
70.800003 37.799999 m
71.900002 37.799999 72.700005 36.899998 72.700005 35.899998 c
72.700005 34.799999 71.800003 33.999996 70.800003 33.999996 c
69.800003 33.999996 68.900002 34.899998 68.900002 35.899998 c
68.900002 37 69.800003 37.799999 70.800003 37.799999 c
h
31.4 34.5 m
31.4 32.700001 30 31.299999 28.199999 31.299999 c
26.4 31.299999 24.999998 32.700001 24.999998 34.5 c
24.999998 36.299999 26.399998 37.700001 28.199999 37.700001 c
30 37.700001 31.4 36.299999 31.4 34.5 c
h
64.800003 68.699997 m
63.700005 68.699997 62.900002 69.599998 62.900002 70.599998 c
62.900002 71.699997 63.800003 72.5 64.800003 72.5 c
65.900002 72.5 66.700005 71.599998 66.700005 70.599998 c
66.699997 69.599998 65.900002 68.699997 64.800003 68.699997 c
h
58.299999 76.400002 m
55.200001 76.400002 52.700001 78.900002 52.700001 82 c
52.700001 85.099998 55.200001 87.599998 58.299999 87.599998 c
61.399998 87.599998 63.899998 85.099998 63.899998 82 c
63.899998 78.900002 61.400002 76.400002 58.299999 76.400002 c
h
71.5 74.5 m
69 74.5 66.900002 76.599998 66.900002 79.099998 c
66.900002 81.599998 69 83.699997 71.5 83.699997 c
74 83.699997 76.099998 81.599998 76.099998 79.099998 c
76.099998 76.599998 74 74.5 71.5 74.5 c
h
57.5 72.5 m
57.5 73.199997 58.099998 73.800003 58.799999 73.800003 c
59.5 73.800003 60.099998 73.200005 60.099998 72.5 c
60.099998 71.800003 59.5 71.199997 58.799999 71.199997 c
58.099998 71.300003 57.5 71.800003 57.5 72.5 c
h
88.5 56.700001 m
87.800003 56.700001 87.199997 57.299999 87.199997 58 c
87.199997 58.700001 87.799995 59.299999 88.5 59.299999 c
89.199997 59.299999 89.800003 58.700001 89.800003 58 c
89.800003 57.299999 89.099998 56.700001 88.5 56.700001 c
h
86.5 62.200001 m
85.400002 62.200001 84.599998 63.100002 84.599998 64.099998 c
84.599998 65.199997 85.5 66 86.5 66 c
87.599998 66 88.400002 65.099998 88.400002 64.099998 c
88.400002 63 87.599998 62.200001 86.5 62.200001 c
h
56.200001 25.5 m
58.700001 25.5 60.799999 23.4 60.799999 20.9 c
60.799999 18.4 58.700001 16.299999 56.200001 16.299999 c
53.700001 16.299999 51.600002 18.4 51.600002 20.9 c
51.600002 23.4 53.700001 25.5 56.200001 25.5 c
h
79.900002 51.400002 m
77.400002 51.400002 75.300003 53.5 75.300003 56 c
75.300003 58.5 77.400002 60.599998 79.900002 60.599998 c
82.400002 60.599998 84.5 58.5 84.5 56 c
84.400002 53.5 82.400002 51.400002 79.900002 51.400002 c
h
21.1 66.099998 m
18.6 66.099998 16.5 68.199997 16.5 70.699997 c
16.5 73.199997 18.6 75.299995 21.1 75.299995 c
23.6 75.299995 25.700001 73.199997 25.700001 70.699997 c
25.700001 68.199997 23.700001 66.099998 21.1 66.099998 c
h
81.099998 68.800003 m
79.299995 68.800003 77.900002 70.200005 77.900002 72 c
77.900002 73.799995 79.300003 75.199997 81.099998 75.199997 c
82.900002 75.199997 84.299995 73.799995 84.299995 72 c
84.299995 70.200005 82.900002 68.800003 81.099998 68.800003 c
h
30.200001 62.200001 m
29.1 62.200001 28.300001 63.100002 28.300001 64.099998 c
28.300001 65.199997 29.200001 66 30.200001 66 c
31.200001 66 32.100002 65.099998 32.100002 64.099998 c
32.099998 63 31.200001 62.200001 30.200001 62.200001 c
h
35.299999 68.800003 m
33.5 68.800003 32.099998 70.200005 32.099998 72 c
32.099998 73.799995 33.5 75.199997 35.299999 75.199997 c
37.099998 75.199997 38.5 73.799995 38.5 72 c
38.5 70.200005 37.099998 68.800003 35.299999 68.800003 c
h
36.200001 83.900002 m
35.100002 83.900002 34.299999 84.800003 34.299999 85.800003 c
34.299999 86.800003 35.200001 87.700005 36.200001 87.700005 c
37.299999 87.700005 38.100002 86.800003 38.100002 85.800003 c
38.100002 84.800003 37.200001 83.900002 36.200001 83.900002 c
h
28.200001 77.099998 m
26.400002 77.099998 25 78.5 25 80.299995 c
25 82.099998 26.4 83.499992 28.200001 83.499992 c
30 83.499992 31.400002 82.099991 31.400002 80.299995 c
31.4 78.5 30 77.099998 28.200001 77.099998 c
h
41 27.5 m
41 28.200001 41.599998 28.799999 42.299999 28.799999 c
43 28.799999 43.599998 28.199999 43.599998 27.5 c
43.599998 26.799999 43 26.200001 42.299999 26.200001 c
41.5 26.200001 41 26.799999 41 27.5 c
h
48.299999 17.9 m
48.299999 14.799999 45.799999 12.299999 42.700001 12.299999 c
39.600002 12.299999 37.100002 14.799999 37.100002 17.9 c
37.100002 21 39.600002 23.5 42.700001 23.5 c
45.799999 23.6 48.299999 21.1 48.299999 17.9 c
h
42.200001 86.400002 m
41.5 86.400002 40.900002 87 40.900002 87.700005 c
40.900002 88.400002 41.5 89.000008 42.200001 89.000008 c
42.900002 89.000008 43.5 88.400009 43.5 87.700005 c
43.5 87 42.900002 86.400002 42.200001 86.400002 c
h
44.799999 74.5 m
42.299999 74.5 40.200001 76.599998 40.200001 79.099998 c
40.200001 81.599998 42.299999 83.699997 44.799999 83.699997 c
47.299999 83.699997 49.399998 81.599998 49.399998 79.099998 c
49.399998 76.599998 47.299999 74.5 44.799999 74.5 c
h
f
Q
q
[74.941719 0 0 74.941483 3719.2771 762.18292] cm
/DeviceRGB {} CS
[1 0.1961 0.3647] SC
/DeviceRGB {} cs
[1 0.1961 0.3647] sc
6.1 6 m
9.24 6 11.28 7.9 11.28 10.76 c
11.28 13.58 9.24 15.34 6.1 15.34 c
4.12 15.34 l
4.12 20 l
1.2 20 l
1.2 6 l
6.1 6 l
h
5.92 12.82 m
7.36 12.82 8.360001 12.259999 8.360001 10.76 c
8.360001 9.280001 7.360001 8.68 5.920001 8.68 c
4.120001 8.68 l
4.120001 12.82 l
5.920001 12.82 l
5.92 12.82 l
h
19.48 9.44 m
19.74 9.44 19.98 9.44 20.24 9.5 c
20.24 12.24 l
20 12.179999 19.76 12.179999 19.559999 12.179999 c
17.639999 12.179999 16.06 13.56 15.879999 15.56 c
15.879999 20 l
13.019999 20 l
13.019999 9.6 l
15.879999 9.6 l
15.879999 12.200001 l
16.339998 10.620001 17.599998 9.440001 19.48 9.440001 c
19.48 9.44 l
h
29.559999 9.6 m
32.419998 9.6 l
32.419998 20 l
29.559998 20 l
29.559998 18.719999 l
29.499998 19.139999 28.479998 20.199999 26.679996 20.199999 c
24.299995 20.199999 21.539997 18.48 21.539997 14.779999 c
21.539997 11.199999 24.299997 9.419998 26.679996 9.419998 c
28.479996 9.419998 29.499996 10.539998 29.559998 10.759998 c
29.559998 9.599999 l
29.559999 9.6 l
h
27.08 17.66 m
28.48 17.66 29.700001 16.700001 29.700001 14.78 c
29.700001 12.92 28.480001 11.96 27.080002 11.96 c
25.640001 11.96 24.320002 12.940001 24.320002 14.78 c
24.320002 16.68 25.640001 17.66 27.080002 17.66 c
27.08 17.66 l
h
39.580002 9.42 m
41.480003 9.42 43.080002 10.24 44.060001 11.92 c
41.860001 12.940001 l
41.299999 12.38 40.760002 11.960001 39.619999 11.960001 c
38.32 11.960001 36.939999 12.940001 36.939999 14.820002 c
36.939999 16.680002 38.32 17.640001 39.619999 17.640001 c
40.759998 17.640001 41.299999 17.240002 41.860001 16.68 c
44.080002 17.700001 l
43.080002 19.380001 41.52 20.16 39.580002 20.16 c
37.260002 20.16 34.160004 18.48 34.160004 14.82 c
34.160004 11.2 37.260002 9.42 39.580002 9.42 c
h
50.459999 17.6 m
51 17.6 51.399998 17.540001 51.84 17.380001 c
51.84 19.780001 l
51.400002 19.980001 50.720001 20.120001 49.720001 20.120001 c
48.100002 20.120001 46.740002 19.560001 46.740002 16.620001 c
46.740002 11.960001 l
45.280003 11.960001 l
45.280003 9.6 l
46.740002 9.6 l
46.740002 7.16 l
49.600002 7.16 l
49.600002 9.6 l
51.820004 9.6 l
51.820004 11.960001 l
49.600002 11.960001 l
49.600002 16.6 l
49.600002 17.08 49.740002 17.6 50.460003 17.6 c
50.459999 17.6 l
h
56.419998 5.86 m
56.419998 8.3 l
53.559998 8.3 l
53.559998 5.86 l
56.419998 5.86 l
h
56.419998 9.6 m
56.419998 20 l
53.559998 20 l
53.559998 9.6 l
56.419998 9.6 l
h
63.580002 9.42 m
65.480003 9.42 67.080002 10.24 68.060005 11.92 c
65.860008 12.940001 l
65.300011 12.38 64.76001 11.960001 63.620007 11.960001 c
62.320007 11.960001 60.940006 12.940001 60.940006 14.820002 c
60.940006 16.680002 62.320007 17.640001 63.620007 17.640001 c
64.76001 17.640001 65.300003 17.240002 65.860008 16.68 c
68.080009 17.700001 l
67.080009 19.380001 65.520012 20.16 63.580009 20.16 c
61.26001 20.16 58.160011 18.48 58.160011 14.82 c
58.160011 11.2 61.26001 9.42 63.580009 9.42 c
63.580002 9.42 l
h
74.32 9.42 m
76.68 9.42 79.940002 11.2 79.32 15.8 c
71.760002 15.8 l
72.120003 17.1 73.200005 17.780001 74.600006 17.780001 c
75.900009 17.780001 76.400009 17.480001 77.140007 17.08 c
78.720009 18.619999 l
77.820007 19.559999 76.540009 20.199999 74.500008 20.199999 c
71.900009 20.199999 68.860008 18.419998 68.860008 14.839998 c
68.860008 11.199998 71.960007 9.419998 74.320007 9.419998 c
74.32 9.42 l
h
74.32 11.86 m
73.279999 11.86 72.18 12.5 71.800003 13.78 c
76.800003 13.78 l
76.480003 12.5 75.340004 11.86 74.32 11.86 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
